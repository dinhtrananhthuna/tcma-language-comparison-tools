# Simple ZIP Distribution for TCMA Language Comparison Tool
# Creates a portable ZIP package that works everywhere

param(
    [string]$Version = "1.0.0"
)

$AppName = "Tcma.LanguageComparison.Gui"
$PublishDir = "publish"
$ZipName = "$AppName-$Version-portable.zip"

Write-Host "=== ZIP Distribution for TCMA Language Comparison Tool ===" -ForegroundColor Cyan
Write-Host "Version: $Version" -ForegroundColor Yellow

# 1. Clean previous builds
Write-Host "Cleaning previous builds..." -ForegroundColor Green
if (Test-Path $PublishDir) { Remove-Item $PublishDir -Recurse -Force }
if (Test-Path $ZipName) { Remove-Item $ZipName -Force }
if (Test-Path "README-Installation.txt") { Remove-Item "README-Installation.txt" -Force }

# 2. Build and publish the application
Write-Host "Building and publishing application..." -ForegroundColor Green
dotnet publish "$AppName.csproj" -c Release -r win-x64 --self-contained true -p:PublishSingleFile=false -o $PublishDir

if (-not (Test-Path "$PublishDir\$AppName.exe")) {
    Write-Error "Build failed - executable not found"
    exit 1
}

# 3. Remove Core.exe to avoid confusion
$CoreExe = "$PublishDir\Tcma.LanguageComparison.Core.exe"
if (Test-Path $CoreExe) {
    Write-Host "Removing Core.exe..." -ForegroundColor Yellow
    Remove-Item $CoreExe -Force
}

# 4. Create installation README
Write-Host "Creating installation instructions..." -ForegroundColor Green
$ReadmeContent = @"
TCMA Language Comparison Tool - Portable Distribution
====================================================

VERSION: $Version
BUILD DATE: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

INSTALLATION INSTRUCTIONS:
--------------------------
1. Extract all files to a folder of your choice (e.g., C:\TCMA-LanguageComparison)
2. Run: $AppName.exe
3. The application is portable - no installation required

SYSTEM REQUIREMENTS:
-------------------
- Windows 10 version 1809 or later
- Windows 11 (recommended)
- .NET 8 runtime (included - self-contained)

FIRST RUN SETUP:
---------------
1. Launch $AppName.exe
2. Click Settings to configure your Google Gemini API key
3. Test with sample files in the 'sample' folder (if included)

USAGE:
------
1. Select Reference File (usually English CSV)
2. Select Target File (language to be aligned)
3. Enter your Gemini API key in Settings
4. Click "Compare Files"
5. Review results and click "Export Results" if satisfied

TROUBLESHOOTING:
---------------
- If app doesn't start: Run as Administrator once
- API errors: Check your Gemini API key and internet connection
- File errors: Ensure CSV files have ContentId,Content format

SUPPORT:
--------
For issues, check the project documentation or create an issue on the repository.

Generated by: build-zip.ps1
"@

Set-Content "README-Installation.txt" $ReadmeContent -Encoding UTF8

# 5. Copy README to publish directory
Copy-Item "README-Installation.txt" -Destination "$PublishDir\"

# 6. Create ZIP package
Write-Host "Creating ZIP package..." -ForegroundColor Green
Compress-Archive -Path "$PublishDir\*" -DestinationPath $ZipName -CompressionLevel Optimal

# 7. Verify package
if (Test-Path $ZipName) {
    $ZipSize = [math]::Round((Get-Item $ZipName).Length / 1MB, 2)
    Write-Host "âœ… ZIP package created successfully!" -ForegroundColor Green
    Write-Host "ðŸ“¦ File: $ZipName" -ForegroundColor Cyan
    Write-Host "ðŸ“¦ Size: $ZipSize MB" -ForegroundColor Cyan
    
    # List main files in the ZIP
    Write-Host "`nðŸ“‹ Package contents:" -ForegroundColor Yellow
    $ZipContents = Get-ChildItem $PublishDir | Sort-Object Name
    foreach ($item in $ZipContents | Select-Object -First 10) {
        if ($item.Name -eq "$AppName.exe") {
            Write-Host "  ðŸŽ¯ $($item.Name) (MAIN EXECUTABLE)" -ForegroundColor Green
        } elseif ($item.Name -eq "README-Installation.txt") {
            Write-Host "  ðŸ“– $($item.Name)" -ForegroundColor Cyan
        } else {
            Write-Host "  ðŸ“„ $($item.Name)" -ForegroundColor Gray
        }
    }
    
    if ($ZipContents.Count -gt 10) {
        Write-Host "  ... and $($ZipContents.Count - 10) more files" -ForegroundColor Gray
    }
    
} else {
    Write-Error "Failed to create ZIP package"
    exit 1
}

Write-Host "`n=== ZIP Distribution Complete ===" -ForegroundColor Cyan
Write-Host "DISTRIBUTION READY: $ZipName" -ForegroundColor Green
Write-Host "`nTo distribute:" -ForegroundColor Yellow
Write-Host "1. Share the $ZipName file" -ForegroundColor White
Write-Host "2. Users extract and run $AppName.exe" -ForegroundColor White
Write-Host "3. No installation required!" -ForegroundColor White